## ams_version=1.0

LibraryModule UserInterface {
	Prefix: ui;
	Interface: UserInterface;
	StringParameter sp_def_readOnly {
		Definition: "readonly";
	}
	StringParameter sp_def_logo {
		Definition: "aimms_logo.png";
	}
	Section System {
		DeclarationSection System_Workflow {
			StringParameter sp_systemWorkflow {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
				Definition: data { ( 1, title ) : "" };
			}
			StringParameter sp_systemWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome",
					  ( 1, 1, icon              ) : "aimms-home2",
					  ( 1, 1, pageId            ) : "home",
					  ( 1, 1, tooltip           ) : "Welcome ",
					  ( 1, 1, workflowPageState ) : "Active",
					  ( 1, 2, displayText       ) : "Problem",
					  ( 1, 2, icon              ) : "aimms-book",
					  ( 1, 2, pageId            ) : "problem",
					  ( 1, 2, tooltip           ) : "Short statement about the problem",
					  ( 1, 2, workflowPageState ) : "Active",
					  ( 1, 3, displayText       ) : "Control Panel",
					  ( 1, 3, icon              ) : "aimms-equalizer4",
					  ( 1, 3, pageId            ) : "control_panel",
					  ( 1, 3, tooltip           ) : "Overview of all the sets",
					  ( 1, 3, workflowPageState ) : "Active",
					  ( 1, 4, displayText       ) : "Results",
					  ( 1, 4, icon              ) : "aimms-compass5",
					  ( 1, 4, pageId            ) : "results",
					  ( 1, 4, tooltip           ) : "Location data",
					  ( 1, 4, workflowPageState ) : "Active" }
				}
			}
			StringParameter sp_systemWorkflowFoldingStates {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexOpenCloseProps);
			}
		}
		DeclarationSection System_Page_Action {
			StringParameter sp_systemSecondaryActions {
				IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
			}
		}
		Procedure pr_yToLatitude {
			Arguments: (p_in_y,p_in_maxY,p_out_latitude);
			Body: {
				p_loc_auxiliar := p_in_y * (p_def_maxLatitude - p_def_minLatitude) /$ p_in_maxY;
				p_out_latitude := p_loc_auxiliar + p_def_minLatitude;
			}
			Parameter p_in_y {
				Property: Input;
			}
			Parameter p_out_latitude {
				Property: Output;
			}
			Parameter p_loc_auxiliar;
			Parameter p_in_maxY;
		}
		Procedure pr_xToLongitude {
			Arguments: (p_in_x,p_in_maxX,p_out_longitude);
			Body: {
				p_loc_auxiliar := p_in_x * (p_def_maxLongitude - p_def_minLongitude) /$ p_in_maxX;
				p_out_longitude := p_loc_auxiliar + p_def_minLongitude;
			}
			Parameter p_in_x {
				Property: Input;
			}
			Parameter p_in_maxX;
			Parameter p_out_longitude {
				Property: Output;
			}
			Parameter p_loc_auxiliar;
		}
	}
	Section Pages {
		Procedure pr_readDefaultData {
			Body: {
				dex::GenerateDatasetMappings;
				dex::ReadAllMappings;
				
				! Load default data
				dex::ReadFromFile("DefaultData.xlsx", "Generated/DefaultData-Excel");
			}
		}
		Section Control_Panel_Page {
			StringParameter sp_def_problemTitle {
				Definition: "Problem Parameters";
			}
			StringParameter sp_def_algorithmTitle {
				Definition: "Algorithm Parameters";
			}
			StringParameter sp_def_controlPanelPrimaryPageAction {
				IndexDomain: webui::indexPageActionSpec;
				Definition: {
					data 
					{ displaytext : "Run"               ,  icon        : "aimms-stack-play"  ,  procedure   : "pr_runPSOAlgorithm",
					  state       : "active"             }
				}
			}
		}
		Section Progress_Page;
		Section Results_Page {
			Set s_histogramSlices {
				Index: i_slice;
				Parameter: ep_histogramSlice;
			}
			Set s_histogramDistanceToStationSlices {
				SubsetOf: s_histogramSlices;
				Index: i_sliceDistanceToStation;
				Definition: {
					{ui::i_slice | sp_distanceToStationSliceDescription(ui::i_slice)}
				}
				webui::ElementTextIdentifier: sp_distanceToStationSliceDescription(ui::i_slice);
			}
			Set s_histogramNumberOfVehiclesSlices {
				SubsetOf: s_histogramSlices;
				Index: i_sliceNumberOfVehicles;
				Definition: {
					{ui::i_slice | sp_numberOfVehiclesSliceDescription(ui::i_slice)}
				}
				webui::ElementTextIdentifier: sp_numberOfVehiclesSliceDescription(ui::i_slice);
			}
			Parameter p_histogramSlices;
			Parameter p_distanceToStationHistogram {
				IndexDomain: i_slice;
				webui::AnnotationsIdentifier: sp_histogramAnnotation;
			}
			StringParameter sp_distanceToStationSliceDescription {
				IndexDomain: i_slice;
			}
			Parameter p_numberOfVehiclesHistogram {
				IndexDomain: i_slice;
				webui::AnnotationsIdentifier: sp_histogramAnnotation;
			}
			StringParameter sp_numberOfVehiclesSliceDescription {
				IndexDomain: i_slice;
			}
			Parameter p_bestGlobalSolutionLongitude {
				IndexDomain: (i_particle);
				Text: "Best global solution X coordinate.";
			}
			Parameter p_bestGlobalSolutionLatitude {
				IndexDomain: (i_particle);
				Text: "Best global solution Y coordinate.";
			}
			StringParameter sp_histogramAnnotation {
				Definition: "histogram";
			}
			StringParameter sp_def_evNodeColor {
				IndexDomain: i_loc;
				Definition: "ev";
			}
			StringParameter sp_def_stationNodeColor {
				IndexDomain: i_particle;
				Definition: "station";
			}
			Procedure pr_calculateSolutionPoints {
				Body: {
					empty p_bestGlobalSolutionLatitude, p_bestGlobalSolutionLongitude;
					p_loc_maxX := max(i_particle, p_bestGlobalSolutionX(i_particle));
					p_loc_maxY := max(i_particle, p_bestGlobalSolutionY(i_particle));
					
					for i_particle do
					    ui::pr_xToLongitude(
					        p_in_x          :  p_bestGlobalSolutionX(i_particle), 
					        p_in_maxX       :  p_loc_maxX,
					        p_out_longitude :  p_bestGlobalSolutionLongitude(i_particle));
					
					    ui::pr_yToLatitude(
					        p_in_y          :  p_bestGlobalSolutionY(i_particle), 
					        p_in_maxY       :  p_loc_maxY,
					        p_out_latitude  :  p_bestGlobalSolutionLatitude(i_particle));    
					endfor;
				}
				Parameter p_loc_maxX;
				Parameter p_loc_maxY;
			}
			Procedure pr_calculateHistograms {
				Body: {
					p_histogramSlices := 10;
					s_histogramSlices := {1 .. 100}; !fixed
					
					!@TODO Delete
					!! Number of chargers per station
					!for i_charger in s_chargers do
					!	p_chargersPerStation_hist(i_charger) 
					!	:=  sum(i_particle | p_bestGlobalSolutionNumberOfVehicles(i_particle) = Val(i_charger), 1 $ p_bestGlobalSolutionNumberOfVehicles(i_particle));
					!endfor;
					
					block ! DistanceToStation Histogram
					empty p_distanceToStationHistogram, sp_distanceToStationSliceDescription;
					
					HistogramCreate(p_loc_histID);
					HistogramSetDomain(p_loc_histID, intervals: p_histogramSlices);
					HistogramAddObservations(p_loc_histID, p_bestGlobalSolutionDistanceToStation(i_loc));
					HistogramGetFrequencies(p_loc_histID, p_distanceToStationHistogram(i_slice));
					HistogramGetBounds(p_loc_histID, p_loc_leftBound(i_slice), p_loc_rightBound(i_slice));
					HistogramDelete(p_loc_histID);
					
					sp_distanceToStationSliceDescription(i_slice) |
					        p_distanceToStationHistogram(i_slice)
					:=  FormatString("%s-%s", 
					            round(p_loc_leftBound(i_slice),2), 
					            round(p_loc_rightBound(i_slice),2));
					
					endblock;
					
					block ! NumberOfVehicles Histogram
					empty p_numberOfVehiclesHistogram, sp_numberOfVehiclesSliceDescription, p_loc_leftBound, p_loc_rightBound;
					
					HistogramCreate(p_loc_histID);
					HistogramSetDomain(p_loc_histID,  intervals: p_histogramSlices);
					
					for i_particle | p_bestGlobalSolutionNumberOfVehicles(i_particle) do
					    HistogramAddObservation(p_loc_histID, p_bestGlobalSolutionNumberOfVehicles(i_particle));
					endfor;    
					
					HistogramGetFrequencies(p_loc_histID, p_numberOfVehiclesHistogram(i_slice));
					HistogramGetBounds(p_loc_histID, p_loc_leftBound(i_slice), p_loc_rightBound(i_slice));
					HistogramDelete(p_loc_histID);
					
					sp_numberOfVehiclesSliceDescription(i_slice) |
					        p_numberOfVehiclesHistogram(i_slice)
					:=  FormatString("%s-%s", 
					            round(p_loc_leftBound(i_slice),2), 
					            round(p_loc_rightBound(i_slice),2));
					
					endblock;
				}
				Parameter p_loc_histID;
				Parameter p_loc_leftBound {
					IndexDomain: i_slice;
				}
				Parameter p_loc_rightBound {
					IndexDomain: i_slice;
				}
			}
		}
	}
	Procedure LibraryInitialization {
		Comment: "Add initialization statements here that do not require any other library being initialized already.";
	}
	Procedure PostLibraryInitialization {
		Comment: {
			"Add initialization statements here that require another library to be initialized already,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure PreLibraryTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that require all other libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure LibraryTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require other libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
